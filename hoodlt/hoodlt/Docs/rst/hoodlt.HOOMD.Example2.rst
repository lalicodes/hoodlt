.. _SimulationExample2:

Example 2: Simulation With CTR-CTR Bonds
========================================

Oftentimes when you build a system, you will add CTR-CTR bonds between nanoparticles, substrates, etc. HOODLT has
predefined ways of changing the lengths and bond coefficients of these special types of bonds so that we can better
study many types of systems. Any time you have a CTR-CTR bond in your system, you should initialize it before starting
the simulation. An example is shown below, where it is assumed a pair is generated as described in
:ref:`NcsExample2`, see the very bottom of this page.

.. code-block:: python

    from hoodlt.HOOMD.SimulationWithBonds import SimulationWithBonds
    from hoodlt.HOOMD.SimParameters import SimParameters

    # the system we simulate are two NCs
    name = 'Au201-Hydrocarbon-n11_cPair_sToluene_ffNcs-In-Solvent_uAngAmuEv'

    # force field
    ff = "ncs-in-solvent"

    steps_sim = 1000
    steps_log = 200
    quant_log = ['kinetic_temperature','potential_energy','pressure']
    steps_write = 200
    steps_hist=100

    num_procs = 1

    sim_params = SimParameters(steps_sim, steps_log, quant_log, steps_write, steps_hist, num_procs)

    # simulation object, note that it is different than in previous examples as we record bond distances
    sim = SimulationWithBonds(sysfile=name, rcut=5, ff_name=ff, temp_in_kelvin=387)

    # here we set the coefficent of CTR-CTR bonds in our system
    # rinit is the equilibrium distance
    # lamda is a strength scaling factor, defaulting to 1
    sim.initialize('rinit_55_l_2',['CTR-CTR1'], rinit=[55], lamda=[0.02], log_hist='average')

    # this method call runs the simulation
    sim.run_hoomd_hist(sim_params, log_partial_energies=True)

Here, we decided that the default value of the bond coefficient CTR-CTR1 needed to be scaled by
0.02, so we defined the parameter lamda accordingly. Also, we set the nanoparticles intially at 55 apart.
This changes are now reflected in the file

.. code-block:: bash

    Au201-Hydrocarbon-n11_cPair_ffNcs-In-Solvent_uAngAmuEv_rinit_55_l_2_bonds.json

which contains the updated values for the bonds introduced. There is a new file now that
appears, and this is

.. code-block:: bash

    Au201-Hydrocarbon-n11_cPair_ffNcs-In-Solvent_uAngAmuEv_rinit_55_l_2_hist.gsd

This gsd file contains the histogram of distributions for the bond length. This is useful for
example, to compute the potential of mean force. Note that it has been generated by the key
'average' in the bond initialization.

The other files in your directory similar to those discussed in the previous example,
:ref:`SimulationExample1`

After initializing the bonds, now we can run production simulations

.. code-block:: python

    from hoodlt.HOOMD.SimulationWithBonds import SimulationWithBonds
    from hoodlt.HOOMD.SimParameters import SimParameters

    # file name
    name = 'Au201-Hydrocarbon-n11_cPair_ffNcs-In-Solvent_uAngAmuEv_rinit_55_l_2'

    ff = "ncs-in-solvent"

    steps_sim = 1000
    steps_log = 200
    quant_log = ['kinetic_temperature','potential_energy','pressure']
    steps_write = 200
    steps_hist=100

    num_procs = 1

    sim_params = SimParameters(steps_sim, steps_log, quant_log, steps_write, steps_hist, num_procs)

    # simulation object, note that it is different than in example 1
    sim = SimulationWithBonds(sysfile=name, rcut=5, ff_name=ff, temp_in_kelvin=387)

    # this method call runs the simulation
    sim.run_hoomd_hist(sim_params, log_partial_energies=True)


Here the bond information is directly read from the .json file.

This file is a simplified version of :ref:`NcsExample2` (it has no solvent),
which is used to generate the restart file.

.. code-block:: python

    from hoodlt.Data.Modelconfigurations.Saver import save_config
    from hoodlt.Data.Modelconfigurations.ConfigurationBuilder import ConfigurationBuilder
    from hoodlt.Data.Modelnanoparticles.TO201 import TO201
    from hoodlt.Data.Modelligands.HydrocarbonLigand import HydrocarbonLigand as Hydrocarbon

    # separation between the two nanoparticles
    l_dist = 55.0
    # simulation box
    box = [3*l_dist, 3*l_dist, 3*l_dist, 0.0, 0.0, 0.0]

    # forcefield
    forcefield = "ncs-in-solvent"

    # core
    core = TO201(forcefield)
    # ligand
    lig = Hydrocarbon(repeats=11, ff=forcefield)

    builder = ConfigurationBuilder()

    # here we add multiple nanoparticles to our configuration
    ind1 = builder.add_nc(core, [lig]*core.graft_num, [-0.5*l_dist, 0, 0])
    ind2 = builder.add_nc(core, [lig]*core.graft_num, [0.5*l_dist, 0, 0])

    # we can also add bonds between bondable entities in our configuration
    builder.add_bond(ind1, ind2, 'CTR-CTR1')

    builder.set_alias("Pair")

    conf = builder.get_configuration()

    save_config(conf)
